#  Copyright (c) 2016-2018
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object PolyhedralFan {

   property HASSE_DIAGRAM {

      property ORIENTATIONS : EdgeMap<Directed, Int>;

   }

   rule HASSE_DIAGRAM.ORIENTATIONS : HASSE_DIAGRAM.ADJACENCY, HASSE_DIAGRAM.BOTTOM_NODE, HASSE_DIAGRAM.TOP_NODE, HASSE_DIAGRAM.DECORATION, HASSE_DIAGRAM.INVERSE_RANK_MAP {
      $this->HASSE_DIAGRAM->ORIENTATIONS = orientations_from_hasse($this->HASSE_DIAGRAM);
   }

}

object PolyhedralComplex {

   property COMPACTIFICATION {
      
      property ORIENTATIONS : EdgeMap<Directed, Int>;

   }

   rule COMPACTIFICATION.ORIENTATIONS : COMPACTIFICATION.ADJACENCY, COMPACTIFICATION.BOTTOM_NODE, COMPACTIFICATION.TOP_NODE, COMPACTIFICATION.DECORATION, COMPACTIFICATION.INVERSE_RANK_MAP {
      my $hd = $this->COMPACTIFICATION;
      $this->COMPACTIFICATION->ORIENTATIONS = orientations_from_hasse($hd);
   }

}

sub orientations_from_hasse {
   my($hd) = @_;
   my $graph = $hd->ADJACENCY;
   my $orientation = new EdgeMap<Directed, Int>($graph);
   my $bottom = $hd->BOTTOM_NODE;
   foreach my $neighbor (@{$graph->out_adjacent_nodes($bottom)}){
      $orientation->edge($bottom, $neighbor) = 1;
   }
   for(my $i=2; $i<$hd->rank; $i++){
      solve_level($hd, $i, $orientation);
   }
   return $orientation;
}


sub solve_level {
   my($hd, $targetLevel, $orientation) = @_;
   my $squares = get_all_squares($hd, $targetLevel);

   my $firstSquare = new Array<Int>($squares->[0]);
   $squares -= $firstSquare;
   my ($u, $v0, $v1, $w) = @$firstSquare;
   $orientation->edge($v0, $w) = 1;
   solve_square($firstSquare, $orientation);
   solve_square($firstSquare, $orientation);

   while($squares->size() > 0){
      my $currentSquare;
      my $found = 0;
      foreach my $square (@$squares){
         if(is_solvable($square, $orientation)){
            $currentSquare = new Array<Int>($square);
            $found = 1;
            last;
         }
      }
      if($found == 0){
         $currentSquare = new Array<Int>($squares->[0]);
         $orientation->edge($currentSquare->[1], $currentSquare->[3]) = 1;
      } 
      $squares -= $currentSquare;
      solve_square($currentSquare, $orientation);
   }
}

sub is_solvable {
   my($square, $or) = @_;
   my ($u, $v0, $v1, $w) = decompose_square($square);
   return !($or->edge($v0,$w) == 0 && $or->edge($v1,$w) == 0);
}

sub decompose_square {
   my($square) = @_;
   return ($square->[0], $square->[1], $square->[2], $square->[3]);
}

sub solve_square {
   my($square, $or) = @_;
   if(!is_solvable($square, $or)){
      die "Square cannot be solved";
   } else {
      my ($u, $v0, $v1, $w) = decompose_square($square);
      if($or->edge($v0,$w) != 0 && $or->edge($v1,$w) != 0){
         my $check = $or->edge($u, $v0) * $or->edge($v0, $w);
         $check += $or->edge($u, $v1) * $or->edge($v1, $w);
         if($check != 0){
            die "Square defect: $square";
         }
      } else {
         if($or->edge($v0, $w) == 0){
            my $tmp = $v1;
            $v1 = $v0;
            $v0 = $tmp;
         }
         my $sign = $or->edge($u, $v1) == 1 ? -1 : 1;
         $or->edge($v1, $w) = $sign * $or->edge($u, $v0) * $or->edge($v0, $w);
      }
   }
}



sub get_all_squares {
   my($hd, $targetLevel) = @_;
   my $graph = $hd->ADJACENCY;
   my $sourceLevel = $targetLevel -2;
   my $midLevel = $targetLevel -1;
   my $result = new Set<Array<Int>>();
   foreach my $target (@{$hd->nodes_of_rank($targetLevel)}){
      my $prev = $graph->in_adjacent_nodes($target);
      foreach my $parent (@$prev){
         foreach my $source (@{$graph->in_adjacent_nodes($parent)}){
            my $other = $prev * $graph->out_adjacent_nodes($source);
            if($other->size() != 2){
               print "Other: $other\n";
               print "Target: $target\n";
               print "Source: $source\n";
               die "Something went wrong.\n";
            } else {
               my $square = new Array<Int>(4);
               $square->[0] = $source;
               $square->[1] = $other->[0];
               $square->[2] = $other->[1];
               $square->[3] = $target;
               $result += $square;
            }
         }
      }
   }
   return $result;
}


