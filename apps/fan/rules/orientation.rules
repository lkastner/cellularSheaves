object PolyhedralFan {

   property ORIENTATIONS : Map<Set<Set<Int> >, Int>;

   rule ORIENTATIONS: HASSE_DIAGRAM, FAN_DIM, RAYS, LINEALITY_SPACE{
      my $rays = $this->RAYS;
      my $lineality = $this->LINEALITY_SPACE;
      my $d = $this->FAN_DIM - 1;
      my $result = new Map<Set<Set<Int> >, Int>();
      my $hd = $this->HASSE_DIAGRAM;
      my $chosenBases = choose_bases_for_cones($rays, $lineality, $hd);
      for(my $i=0; $i<$d; $i++){
         my $sigmas = $hd->nodes_of_dim($d-$i);
         my $taus = $hd->nodes_of_dim($d-$i-1);
         foreach my $sigma (@$sigmas) {
            my $honestSigma = $hd->FACES->[$sigma];
            foreach my $tau (@$taus) {
               my $honestTau = $hd->FACES->[$tau];
               my $keySet = new Set<Set<Int> >($honestSigma, $honestTau);
               $result->{$keySet} = compute_orientation($honestSigma, $honestTau, $chosenBases);
            }
         } 
      }
      $this->ORIENTATIONS = $result;
   }

}

sub choose_bases_for_cones{
   my($rays, $lineality, $hd) = @_;
   my $result = new Map<Set<Int>, Matrix>();
   for my $face (@{$hd->FACES}){
      my $Crays = $rays->minor($face, All);
      $result->{$face} = choose_basis($Crays/$lineality);
   }
   return $result;
}


sub compute_orientation{
   my($sigma, $tau, $chosenBases) = @_;
   if(is_face($sigma, $tau)){
      # print "Sigma: ",$sigma," Tau: ",$tau,"\n";
      my $sigmaBasis = $chosenBases->{$sigma};
      my $tauBasis = $chosenBases->{$tau};
      return compute_orientation_for_face($sigmaBasis, $tauBasis);
   } else { 
      return 0;
   }
}


sub is_face{
   my($sigma, $tau) = @_;
   my $test = $sigma * $tau;
   return $test->size == $tau->size;
}


sub compute_orientation_for_face{
   my($sigmaBasis, $tauBasis) = @_;
   my $genVector = get_genVector($sigmaBasis, $tauBasis);
   # print "SigmaBasis:\n", $sigmaBasis,"\nTauBasis:\n",$tauBasis,"\ngenVector:",$genVector,"\n";
   my $relativeRow = new Matrix(build_matrix($sigmaBasis,  new Matrix($genVector)));
   # print $relativeRow,"\n";
   my $dxdMinus1 = build_matrix($sigmaBasis, $tauBasis);
   # print "Block:\n",$dxdMinus1;
   my $baseChangeMatrix = new Matrix($relativeRow / $dxdMinus1);   
   if (det($baseChangeMatrix) >= 0){
      return 1;
   } else {
      return -1;
   }
}


sub get_genVector{
   my($sigmaBasis, $tauBasis) = @_;
   my $tauRank = rank($tauBasis);
   for my $s (@$sigmaBasis){
      my $test = rank($tauBasis/$s);
      if($test > $tauRank){
         return $s;
      }
   }
   die "No good vector found.";
}
