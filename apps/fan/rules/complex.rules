#  Copyright (c) 2016-2018
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

declare object ChainComplex {

   property DIFFERENTIALS : topaz::ChainComplex<Matrix<Rational>>;

   property INPUT_DIFFERENTIALS : Array<Matrix>;

   property INPUT_ZERO_POS : Integer;
   
   property ZERO_POS : Integer;

   property BETTI_NUMBERS : Vector<Int>;

   rule DIFFERENTIALS, ZERO_POS : INPUT_DIFFERENTIALS, INPUT_ZERO_POS {
      my $diffs = new Array<Matrix<Rational>>($this->INPUT_DIFFERENTIALS->size());
      for(my $i=0; $i<$diffs->size(); $i++){
         $diffs->[$i] = transpose($this->INPUT_DIFFERENTIALS->[$i]);
      }
      $this->DIFFERENTIALS = new topaz::ChainComplex<Matrix<Rational>>($diffs);
      $this->ZERO_POS = $this->INPUT_ZERO_POS;
   }

   rule INPUT_ZERO_POS : {
      $this->INPUT_ZERO_POS = 0;
   }


   rule BETTI_NUMBERS : DIFFERENTIALS {
      $this->BETTI_NUMBERS = topaz::betti_numbers($this->DIFFERENTIALS);
   }

   user_method print(){
      my($this) = @_;
      print $this->DIFFERENTIALS;
   }

   user_method print_debug(){
      my($this) = @_;
      print $this->DIFFERENTIALS;
   }

}

declare object CoChainComplex {
   
   property INTERNAL_COMPLEX : ChainComplex;

   property BETTI_NUMBERS : Vector<Int>;
   
   property ZERO_POS : Integer; 
   
   rule BETTI_NUMBERS : INTERNAL_COMPLEX.BETTI_NUMBERS {
      my $prev = $this->INTERNAL_COMPLEX->BETTI_NUMBERS;
      my $result = new Vector<Int>($prev->dim);
      for(my $i=0; $i<$prev->dim; $i++){
         $result->[$i] = $prev->[$prev->dim - $i-1];
      }
      $this->BETTI_NUMBERS = $result;
   }

	user_method print(){
      my($this) = @_;
      print $this->INTERNAL_COMPLEX->DIFFERENTIALS;
   }
   
}



