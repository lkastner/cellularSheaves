object PolyhedralComplex {
	
   user_method wcosheaf( $ ){
      my($pc, $p) = @_;
      my $G = $pc->HASSE_DIAGRAM->ADJACENCY;
      my $newblocks = new EdgeMap<Directed, Matrix>($G);
      my $newbases = new NodeMap<Directed, Matrix >($G);
      my $chosenBases = $pc->CHOSEN_BASES;
      if ($p == 0){
         $newblocks = build_blocks_constant($pc);
         for(my $node = entire(nodes($G)); $node; ++$node){
            $newbases->[$$node] = new Matrix([[1]]);
         }
      } else{ 
         my $simpleBlocks = $pc->SIMPLE_BLOCKS;
         for (my $e=entire(edges($G)); $e; ++$e) {
            $newblocks->[$$e] = wedge_matrix($simpleBlocks->[$$e], $p);
         }
         for(my $node = entire(nodes($G)); $node; ++$node){
            $newbases->[$$node] = wedge_matrix($chosenBases->[$$node], $p);
         }
      }
      my $sheaf = $pc->add("COSHEAF", BLOCKS=>$newblocks, BASES=>$newbases);
      return $sheaf;
   }

      
      
   user_method wsheaf( $ ){
      my($pc, $p) = @_;
      my $G = $pc->HASSE_DIAGRAM->ADJACENCY;
      my $newblocks = new EdgeMap<Directed, Matrix>($G);
      my $newbases = new NodeMap<Directed, Matrix >($G);
      my $chosenBases = $pc->CHOSEN_BASES;
      if ($p == 0){
         $newblocks = build_blocks_constant($pc);
         for(my $node = entire(nodes($G)); $node; ++$node){
            $newbases->[$$node] = new Matrix([[1]]);
         }
      } else{ 
         my $simpleBlocks = $pc->SIMPLE_BLOCKS;
         for (my $e=entire(edges($G)); $e; ++$e) {
            $newblocks->[$$e] = new Matrix(transpose(wedge_matrix($simpleBlocks->[$$e], $p)));
         }
         for(my $node = entire(nodes($G)); $node; ++$node){
            $newbases->[$$node] = wedge_matrix($chosenBases->[$$node], $p);
         }
      }
      my $cosheaf = $pc->add("SHEAF", BLOCKS=>$newblocks, BASES=>$newbases);
      return $cosheaf;
   }
   
 
}
