#  Copyright (c) 2016-2018
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object PolyhedralComplex {
	
   user_method wcosheaf( $ ){
      my($pc, $p) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $blocks = wcosheaf_from_hd($hd, $p);
      my $sheaf = $hd->add("COSHEAF", BLOCKS=>$blocks);
      return $sheaf;
   }

   user_method wsheaf( $ ){
      my($pc, $p) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $blocks = wsheaf_from_hd($hd, $p);
      my $cosheaf = $hd->add("SHEAF", BLOCKS=>$blocks);
      return $cosheaf;
   }
   
   user_method compact_wsheaf( $ ){
      my($pc, $p) = @_;
      my $hd = $pc->COMPACTIFICATION;
      my $blocks = wsheaf_from_hd($hd, $p);
      my $cosheaf = $hd->add("SHEAF", BLOCKS=>$blocks);
      return $cosheaf;
   }
}

sub wcosheaf_from_hd {
   my($hd, $p) = @_;
   my $G = $hd->ADJACENCY;
   my $newblocks = new EdgeMap<Directed, Matrix>($G);
   my $chosenBases = $hd->CHOSEN_BASES;
   if ($p == 0){
      $newblocks = build_blocks_constant($hd);
   } else{ 
      my $simpleBlocks = $hd->SIMPLE_BLOCKS;
      for (my $e=entire(edges($G)); $e; ++$e) {
         $newblocks->[$$e] = transpose(wedge_matrix($simpleBlocks->[$$e], $p));
      }
   }
   return $newblocks;
}

sub wsheaf_from_hd {
   my($hd, $p) = @_;
   my $G = $hd->ADJACENCY;
   my $newblocks = new EdgeMap<Directed, Matrix>($G);
   my $chosenBases = $hd->CHOSEN_BASES;
   if ($p == 0){
      $newblocks = build_blocks_constant($hd);
   } else{ 
      my $simpleBlocks = $hd->SIMPLE_BLOCKS;
      for (my $e=entire(edges($G)); $e; ++$e) {
         $newblocks->[$$e] = wedge_matrix($simpleBlocks->[$$e], $p);
      }
   }
   return $newblocks;
}
