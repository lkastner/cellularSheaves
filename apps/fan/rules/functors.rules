object PolyhedralComplex {

  
  user_method usual_chain_complex( CoSheaf ){
 		my($pc, $cosheaf) = @_;
		my $bases = $cosheaf->BASES;
		my $blocks = $cosheaf->BLOCKS;
		my $boundedFaces = $pc->BOUNDED_FACES; 
		my $orientations = $pc->ORIENTATIONS;

      my $diff = build_bounded_chain($pc, $cosheaf, false);
		my $usualChain = build_chain_complex($blocks, $boundedFaces, $orientations, $bases);
      if($diff != $usualChain->INPUT_DIFFERENTIALS){
         print "Something went very wrong.\n";
         return 0;
      }

		return new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
	 }
	
	user_method borel_moore_complex( CoSheaf ){
 		my($pc, $cosheaf) = @_;
 		my $bases = $cosheaf->BASES;
		my $blocks = $cosheaf->BLOCKS;
		my $nonFarFaces = $pc->NON_FAR_FACES; 
		my $orientations = $pc->ORIENTATIONS;
      
      my $diff = build_nonfar_chain($pc, $cosheaf, false);
      my $borelMooreChain = build_chain_complex($blocks, $nonFarFaces, $orientations, $bases);
      if($diff != $borelMooreChain->INPUT_DIFFERENTIALS){
         print "Something went very wrong.\n";
         return 0;
      }

		return $borelMooreChain;
	 } 

  user_method usual_cochain_complex( Sheaf ){
 		my($pc, $sheaf) = @_;
		my $bases = $sheaf->BASES;
		my $blocks = $sheaf->BLOCKS;
		my $boundedFaces = $pc->BOUNDED_FACES; 
		my $orientations = $pc->ORIENTATIONS;
      
      my $diff = build_bounded_chain($pc, $sheaf, true);
      my $usualChain = build_cochain_complex($blocks, $boundedFaces, $orientations, $bases);
      if($diff != $usualChain->INTERNAL_COMPLEX->INPUT_DIFFERENTIALS){
         print "Something went very wrong.\n";
         return $usualChain;
      }

      my $internal = new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
		return new CoChainComplex(INTERNAL_COMPLEX=>$internal);
      # return $usualChain;
	 }
	
	user_method compact_support_complex( Sheaf ){
 		my($pc, $sheaf) = @_;
 		my $bases = $sheaf->BASES;
		my $blocks = $sheaf->BLOCKS;
		my $nonFarFaces = $pc->NON_FAR_FACES; 
		my $orientations = $pc->ORIENTATIONS;
      
      my $diff = build_nonfar_chain($pc, $sheaf, true);
      my $borelMooreChain = build_cochain_complex($blocks, $nonFarFaces, $orientations, $bases);
      if($diff != $borelMooreChain->INTERNAL_COMPLEX->INPUT_DIFFERENTIALS){
         print "Something went very wrong.\n";
         return 0;
      }

      my $internal = new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
		return new CoChainComplex(INTERNAL_COMPLEX=>$internal);
      # return $borelMooreChain;
	 } 

}

