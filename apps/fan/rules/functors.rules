#  Copyright (c) 2016-2018
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object PolyhedralComplex {

  
  user_method usual_chain_complex( CoSheaf ){
 		my($pc, $cosheaf) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $diff = build_bounded_chain($hd, $hd->ORIENTATIONS, $pc->FAR_VERTICES, $cosheaf, false);
		return new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
	 }
	
	user_method borel_moore_complex( CoSheaf ){
 		my($pc, $cosheaf) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $diff = build_nonfar_chain($hd, $hd->ORIENTATIONS, $pc->FAR_VERTICES, $cosheaf, false);
		return new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
	 } 

  user_method usual_cochain_complex( Sheaf ){
 		my($pc, $sheaf) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $diff = build_bounded_chain($hd, $hd->ORIENTATIONS, $pc->FAR_VERTICES, $sheaf, true);
      my $internal = new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
		return new CoChainComplex(INTERNAL_COMPLEX=>$internal);
	 }
	
	user_method compact_support_complex( Sheaf ){
 		my($pc, $sheaf) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
      my $diff = build_nonfar_chain($hd, $hd->ORIENTATIONS, $pc->FAR_VERTICES, $sheaf, true);
      my $internal = new ChainComplex(INPUT_DIFFERENTIALS=>$diff);
		return new CoChainComplex(INTERNAL_COMPLEX=>$internal);
	 } 

}

