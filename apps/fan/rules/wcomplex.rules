object PolyhedralComplex {
	
   user_method wcomplex( $ ){
      my($pc, $p) = @_;
      my $simpleBlocks = $pc->SIMPLE_BLOCKS;
      my $newblocks = new Map<Set<Set<Int> >, Matrix >();
      foreach my $key (keys %$simpleBlocks){
         $newblocks->{$key} = wedge_matrix($simpleBlocks->{$key}, $p);
      }
      my $sheaf = $pc->add("SHEAF", BLOCKS=>$newblocks);
      return $sheaf;
   }

   user_method dualwcomplex( $ ){
      my($pc, $p) = @_;
      my $simpleBlocks = $pc->SIMPLE_BLOCKS;
      my $newblocks = new Map<Set<Set<Int> >, Matrix >();
      foreach my $key (keys %$simpleBlocks){
         $newblocks->{$key} = transpose(wedge_matrix($simpleBlocks->{$key}, $p));
      }
      my $cosheaf = $pc->add("COSHEAF", BLOCKS=>$newblocks);
      return $cosheaf;
   }
   
   
  user_method usual_chain_complex( $ ){
 		my($pc, $sheaf) = @_;
		my $blocks = $sheaf->BLOCKS;
		my $boundedFaces = $pc->BOUNDED_FACES; 
		my $orientations = $pc->ORIENTATIONS;
		my $usualChain = build_chain_complex($blocks, $boundedFaces, $orientations);
		return $usualChain;
	 }
	
	user_method borel_moore_complex( $ ){
 		my($pc, $sheaf) = @_;
		my $blocks = $sheaf->BLOCKS;
		my $nonFarFaces = $pc->NON_FAR_FACES; 
		my $orientations = $pc->ORIENTATIONS;
		my $borelMooreChain = build_chain_complex($blocks, $nonFarFaces, $orientations);
		return $borelMooreChain;
	 } 


}

