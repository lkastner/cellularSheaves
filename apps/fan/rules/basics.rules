
object PolyhedralComplex {

   property SIMPLE_BLOCKS : Map<Set<Set<Int> >, Matrix >;

   property CHOSEN_BASES : Map<Set<Int>, Matrix>;


   rule CHOSEN_BASES : VERTICES, HASSE_DIAGRAM, FAN_DIM, LINEALITY_SPACE {
      my $result = new Map<Set<Int>, Matrix>();
      my $lin = $this->LINEALITY_SPACE;
      my $d = $this->FAN_DIM - 1;
      my $vertices = $this->VERTICES;
      my $hd = $this->HASSE_DIAGRAM;
      for(my $i=0; $i<=$d; $i++){
         my $sigmaDim = $d - $i;
         # print "Looking at dim ",$sigmaDim,"\n";
         my $sigmas = $hd->nodes_of_dim($sigmaDim);
         foreach my $sigma (@$sigmas) {
            my $honestSigma = $hd->FACES->[$sigma];
            my $vertSigma = $vertices->minor($honestSigma, All);
            my $p = new Polytope(POINTS=>$vertSigma, INPUT_LINEALITY=>$lin);
            if($p->FEASIBLE){
               my $aff = $p->AFFINE_HULL;
               $aff = $aff->minor(All, ~[0]);
               $result->{$honestSigma} = null_space($aff);
            } else {
               $result->{$honestSigma} = new Matrix(0, $d);
            }
         }
      }
      $this->CHOSEN_BASES = $result;
   }

   
   rule SIMPLE_BLOCKS : HASSE_DIAGRAM, FAN_DIM, CHOSEN_BASES {
      my $result = new Map<Set<Set<Int> >, Matrix>();
      my $d = $this->FAN_DIM - 1;
      my $chosenBases = $this->CHOSEN_BASES;
      my $hd = $this->HASSE_DIAGRAM;
      # print $d,"\n";
      for(my $i=0; $i<$d; $i++){
         my $sigmas = $hd->nodes_of_dim($d-$i);
         my $taus = $hd->nodes_of_dim($d-$i-1);
         foreach my $sigma (@$sigmas) {
            my $honestSigma = $hd->FACES->[$sigma];
            foreach my $tau (@$taus) {
               my $honestTau = $hd->FACES->[$tau];
               # print $honestSigma," ",$honestTau,"\n";
               my $keySet = new Set<Set<Int> >($honestSigma, $honestTau);
               my $sigmaBasis = $chosenBases->{$honestSigma};
               my $tauBasis = $chosenBases->{$honestTau};
               my $map;
               my $test = $honestSigma*$honestTau;
               if($test->size == $honestTau->size){
                  $map = build_matrix($sigmaBasis, $tauBasis);
               } else {
                  $map = zero_matrix($tauBasis->rows, $sigmaBasis->rows);
               }
               $result->{$keySet} = $map;
               # print $result->{$keySet}->rows()," ",$result->{$keySet}->cols(),"\n";
            }
         }
      }
      $this->SIMPLE_BLOCKS = $result;
   }
   
    	
 	# rule ORIENTATIONS : HASSE_DIAGRAM, FAN_DIM, SIMPLE_BLOCKS, VERTICES, CHOSEN_BASES {
   #    # returns either 0, +1, -1 depending on the compatibility of thechosen ordered bases
   # }

}








sub to_lattice_basis{
   my($A) = @_;
   my $Aint = new Matrix<Integer>(primitive($A));
   my ($D, $L, $R) = @{smith_normal_form($Aint)};
   return $R->minor([0..$A->rows()-1],All);
}


