#  Copyright (c) 2016-2018
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------


object PolyhedralComplex {

   user_method fcosheaf( $ ){
      my($pc, $p) = @_;
      my $blocks;
      my $hd = $pc->HASSE_DIAGRAM;
      if ($p == 0){
         $blocks = build_blocks_constant($hd);
      } else{ 
         my $newbases = build_bases_f($pc, $p);
         $blocks = build_blocks_f($pc, $p, $newbases); 
      }
      my $sheaf = $hd->add("COSHEAF", BLOCKS=>$blocks);
      return $sheaf;
   }


	user_method constant_sheaf( ){
		my($pc) = @_;
      my $hd = $pc->HASSE_DIAGRAM;
		my $blocks = build_blocks_constant($hd);
		my $const_sheaf = $hd->add("COSHEAF", BLOCKS => $blocks);
		return $const_sheaf;
	}

}

sub find_max_containing{
   my($honestTau, $pc) = @_;
   my $max_cones = $pc->HASSE_DIAGRAM->nodes_of_dim($pc->DIM);
   my @result = ();
   foreach my $sigma (@$max_cones) {
      my $honestSigma = $pc->HASSE_DIAGRAM->FACES->[$sigma];
      my $test = $honestSigma*$honestTau;
      if($test->size == $honestTau->size){
         push @result, $sigma;
      }
   }
   return @result;
}


sub build_matrix_f{
	my($honestTau, $pc, $p) =@_;
	my $n = $pc->AMBIENT_DIM;
	my @max_cones_tau = find_max_containing($honestTau, $pc);
	my $cols = new Int(binomial($n, $p));
	my $generators  = zero_matrix(1, $cols);
	my $chosenBases = $pc->HASSE_DIAGRAM->CHOSEN_BASES;  #this is really unnecessary, only need CHOSEN_BASES top cones.
	foreach my $sigma (@max_cones_tau) {
		my $wedged_basis = new Matrix wedge_matrix($chosenBases->[$sigma], $p);	
		$generators = new Matrix( $generators / $wedged_basis);
	}	
	return choose_basis($generators);
}


sub build_blocks_f{ 
   my($pc, $p, $bases) =@_;
   my $d = $pc->FAN_DIM - 1;
   my $G = $pc->HASSE_DIAGRAM->ADJACENCY;
   my $faces = $pc->HASSE_DIAGRAM->FACES;
   my $newBlocks = new EdgeMap<Directed, Matrix>($G);
   for (my $e=entire(edges($G)); $e; ++$e) {
      my $fpSigmaBasis = $bases->[$e->to_node];
      my $fpTauBasis = $bases->[$e->from_node];

      my $map = build_matrix($fpTauBasis, $fpSigmaBasis);
      $newBlocks->[$$e] = new Matrix(transpose($map));
   }
   return $newBlocks; 
}


sub build_bases_f{ 
	my($pc, $p) =@_;
	my $d = $pc->FAN_DIM - 1;
	my $hd = $pc->HASSE_DIAGRAM;
   my $G = $pc->HASSE_DIAGRAM->ADJACENCY;
	my $newBases = new NodeMap<Directed , Matrix >($G);
   for(my $node = entire(nodes($G)); $node; ++$node){
      if($p == 0){
         $newBases->[$$node] = new Matrix([[1]]);
      } else {
         my $honestSigma = $hd->FACES->[$$node];
         $newBases->[$$node] = build_matrix_f($honestSigma, $pc, $p);
      }
   }
	# for(my $i=0; $i<$d+1; $i++){
   #    my $sigmas = $hd->nodes_of_dim($d-$i);
   #    foreach my $sigma (@$sigmas) {
   #       my $honestSigma = $hd->FACES->[$sigma];
   #       my $keySet = new Set<Int> ($honestSigma);
   #       my $fpSigmaBasis = new Matrix([[1]]);
   #       if ($p ==0) {
   #       	  $fpSigmaBasis = new Matrix([[1]]);
   #       } else {
   #       		$fpSigmaBasis = new Matrix (build_matrix_f($honestSigma, $pc, $p));
   #       	}
   #       $newBases->{$keySet} = $fpSigmaBasis;
   #     }   
	# }
	return $newBases; 
}



sub build_blocks_constant{
	my($hd) = @_;
	my $d = $hd->rank() - 2;
   my $G = $hd->ADJACENCY;
   my $newBlocks = new EdgeMap<Directed, Matrix>($G);
   for (my $e=entire(edges($G)); $e; ++$e) {
      $newBlocks->[$$e] = new Matrix([[1]]);
   }
	return $newBlocks;	
} 
