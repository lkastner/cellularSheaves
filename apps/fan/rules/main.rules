#  Copyright (c) 2016-2019
#  Lars Kastner (TU Berlin)
#  Kristin Shaw (University of Oslo)
#  Anna-Lena Winz (FU Berlin)

#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

INCLUDE
   orientation.rules
   basics.rules
   sheaves.rules
   wsheaf.rules
   fcosheaf.rules
   functors.rules
   compact_fcosheaf.rules

# Comment that makes pm run
user_function wedge_matrix_cpp<Element=Rational>(Matrix, $ ) : c++ (include => "polymake/fan/linalg_tools.h");

user_function choose_basis_cpp<Element=Rational>(Matrix) : c++ (include => "polymake/fan/linalg_tools.h");

user_function build_matrix_cpp<Element=Rational>(Matrix,Matrix) : c++ (include => "polymake/fan/linalg_tools.h");


sub choose_basis{
   my($A) = @_;
   my $desired = rank($A);
   if($desired == 0){
      return zero_matrix(0,$A->cols);
   }
   else{
      return choose_basis_cpp($A);
   }
}

# Builds a
# ($smaller->rows, $bigger->rows)-Matrix
# that shows how to represent the basis elements of the smaller basis in the
# bigger basis.
sub build_matrix{
   my($bigger, $smaller) = @_;
   if($bigger->rows == 0){
      return zero_matrix($smaller->rows, $bigger->rows);
   }
   my $nrows = $smaller->rows;
   if ($nrows == 0){
      return zero_matrix(0,$bigger->rows);
   } else {
      return build_matrix_cpp($bigger,$smaller);
   }
}


sub wedge_matrix{
   my($A, $p) = @_;
   my $nrows = binomial($A->rows, $p);
   my $ncols = binomial($A->cols, $p);
   if(($nrows == 0) || ($ncols == 0)){
      return zero_matrix($nrows, $ncols);
   } else {
      return wedge_matrix_cpp($A, $p);
   }
}

user_function verify_sheaf( $ , $ , $ ){
   my($E, $G, $cosheaf) = @_;
   for(my $node = entire(nodes($G)); $node; ++$node){
      # print $$node,":\n";
      my $in = $G->in_adjacent_nodes($$node);
      my $out = $G->out_adjacent_nodes($$node);
      # print "In: ", join(" ",map($E->edge($_,$$node)->cols(), @$in)), "\n";
      # print "Out: ", join(" ",map($E->edge($$node,$_)->rows(), @$out)), "\n";
      my @a;
      if($cosheaf){
         @a = (map($E->edge($_,$$node)->rows(), @$in), map($E->edge($$node,$_)->cols(), @$out));
      } else {
         @a = (map($E->edge($_,$$node)->cols(), @$in), map($E->edge($$node,$_)->rows(), @$out));
      }
      my $check = new Set<Int>(\@a);
      if($check->size() != 1){
         die "Something wrong with this sheaf.";
      }

   }
}

