
object PolyhedralComplex {

   user_method fcomplex( $ ){
      my($pc, $p) = @_;
      my $newblocks = build_blocks_f($pc, $p);  
      my $sheaf = $pc->add("SHEAF", BLOCKS=>$newblocks);
      return $sheaf;
   }


	user_method constant_sheaf( ){
		my($pc) = @_;
		my $newblocks = build_blocks_constant($pc);
		my $const_sheaf = $pc->add("SHEAF", BLOCKS => $newblocks);
		return $const_sheaf;
	}

}

sub find_max_containing{
   my($honestTau, $pc) = @_;
   my $max_cones = $pc->MAXIMAL_CONES;
   my @result = ();
   foreach my $sigma (@$max_cones) {
   		my $test = $sigma*$honestTau;
        if($test->size == $honestTau->size){
        	push @result, $sigma;
        }
    }
	return @result;
}


sub build_matrix_f{
	my($honestTau, $pc, $p) =@_;
	my $n = $pc->AMBIENT_DIM;
	my @max_cones_tau = find_max_containing($honestTau, $pc);
	my $cols = new Int(binomial($n, $p));
	my $generators  = zero_matrix(1, $cols);
	my $chosenBases = $pc->CHOSEN_BASES;  #this is really unnecessary, only need CHOSEN_BASES top cones.
	foreach my $sigma (@max_cones_tau) {
		my $wedged_basis = new Matrix wedge_matrix($chosenBases->{$sigma}, $p);	
		$generators = new Matrix( $generators / $wedged_basis);
	}	
	return choose_basis_cpp($generators);
}


sub build_blocks_f{ 
	my($pc, $p) =@_;
	my $d = $pc->FAN_DIM - 1;
	my $hd = $pc->HASSE_DIAGRAM;
	my $newBlocks = new Map<Set<Set<Int> >, Matrix >();
	for(my $i=0; $i<$d; $i++){
      my $sigmas = $hd->nodes_of_dim($d-$i);
      my $taus = $hd->nodes_of_dim($d-$i-1);
      foreach my $sigma (@$sigmas) {
         my $honestSigma = $hd->FACES->[$sigma];
         foreach my $tau (@$taus) {
            my $honestTau = $hd->FACES->[$tau];
            my $keySet = new Set<Set<Int> >($honestSigma, $honestTau);
            my $fpSigmaBasis = new Matrix (build_matrix_f($honestSigma, $pc, $p));
            my $fpTauBasis = new Matrix (build_matrix_f($honestTau, $pc, $p));
            my $map;
            my $test = $honestSigma*$honestTau;
            if($test->size == $honestTau->size){
               $map = build_matrix($fpTauBasis, $fpSigmaBasis);
            } else {
               $map = zero_matrix($fpTauBasis->rows, $fpSigmaBasis->rows);
            }
            $newBlocks->{$keySet} = $map;
         }   
		}
	}
	return $newBlocks; 
}

sub build_blocks_constant{
	my($pc) = @_;
	my $d = $pc->FAN_DIM - 1;
	my $hd = $pc->HASSE_DIAGRAM;
	my $orientations = $pc->ORIENTATIONS;
	my $newBlocks = new Map<Set<Set<Int>>, Matrix>();
	for(my $i=0; $i<$d; $i++){
      my $sigmas = $hd->nodes_of_dim($d-$i);
      my $taus = $hd->nodes_of_dim($d-$i-1);
      foreach my $sigma (@$sigmas) {
         my $honestSigma = $hd->FACES->[$sigma];
         foreach my $tau (@$taus) {
            my $honestTau = $hd->FACES->[$tau];
            my $keySet = new Set<Set<Int> >($honestSigma, $honestTau);
            my $entry = $orientations->{$keySet};
            my $block = new Matrix ( [[$entry*$entry]] );
            $newBlocks->{$keySet} = $block;
			}
		}
	}
	return $newBlocks;	
} 
